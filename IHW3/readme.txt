ИДЗ №3
Артемьев Александр Вячеславович БПИ227
Вариант 1
Желаемая оценка 5


Условие:
Задача о парикмахере. В тихом городке есть парикмахерская. Салон парикмахерской мал,
работать в нем может только один парикмахер, обслуживающий одного посетителя.
Есть несколько стульев для ожидания в очереди. Парикмахер всю жизнь обслуживает посетителей.
Когда в салоне никого нет, он спит в кресле. Когда посетитель приходит и видит спящего парикмахера,
он будет его, садится в кресло, и сидит в нем, пока парикмахер обслуживает его.
Если посетитель приходит, а парикмахер занят, то он встает в очередь, садится на свободный стул и
«засыпает». После стрижки парикмахер сам провожает посетителя. Если есть ожидающие посетители,
то парикмахер будит одного из них, ждет пока тот сядет в кресло парикмахера и начинает стрижку.
Если никого нет, он снова садится в свое кресло и засыпает до прихода посетителя.
Количество стульев для ожидания в очереди ограничено числом N. Если стульев не хватает, то пришедший посетитель уходит.
Создать клиент–серверное приложение, моделирующее рабочий день парикмахерской.
Парикмахера и парикмахерскую моделировать в виде сервера. Каждого из посетителей моделировать
в виде отдельного клиента. Клиенты могут запускаться независимо друг от друга как вручную,
так и с использованием скриптов, или других программ, запускающих их в фоновом режиме.
В этом случае предусмотреть задержку, задающую паузу между запуском клиентов.


Решение: Создано клиент-серверное приложение. Парикмахер(barber) и Парикмахерская(server)
представлены в виде серверов, а посетители (customer) в виде клиентов.
В приложении создается сокеты для barber и для customer. В customer создаются посетители
и передается информация на сервер, который добавляет посетителей в очередь,
если очередь заполнена, то есть нет больше стульев в парикмахерской, тогда посетитель не обслуживается
и уходит домой. В случае если клиент стал в очередь то сервер передает barber информацию о клиенте и
barber обрабатывает следующего customer. server выводит информацию, которая ему поступает, в свою
очередь customer выводит создание новых клиентов, а barber выводит клиентов, которых он обслужил


Для запуска программы сначала требуется скомпилировать 3 файла в папке 4-5:
gcc barber.c -o barber
gcc customer.c -o customer
gcc server.c -o server
Затем запускаем сначала server командой ./server 9000 8080(./server <barber_port> <customer_port>)
потом barber и customer
./barber 127.0.0.1 9000 (./barber <server_ip> <barber_port>)
./customer 127.0.0.1 8080 10 (./customer <server_ip> <customer_port> <number of clients>)
Завершать работу серверов можно с помощью нажатия ctrl+c
test1 test2 test3 - тестовые прогоны для разного числа посетителей